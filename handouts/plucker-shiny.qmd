---
title: Plucked string demo
format: html
filters:
  - shinylive
---

This is a simplified calculation showing which harmonics are excited when a string is plucked at various locations along its length.  Use the slider to choose where along the string it is plucked, then the calculation will show the first few harmonics and their superposition.

*Please be patient, as this takes a while to load.  Also, every time you change the location you may need to wait for the calculation to finish.*

```{shinylive-python}
#| viewerHeight: 800
#| standalone: true
#| components: viewer

from shiny import *
import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wf

import pathlib

my_path = pathlib.Path(__file__).parent / "www"
my_path.mkdir(exist_ok=True)

num_modes = 10
mode_list = 1 + np.arange(num_modes)
oversample = 2 # factor times the nyquist sampling limit

# pre-calculate a bunch of sines
num_steps = 101
positions = np.linspace(0.0, 1.0, num_steps, endpoint=True)
phase_array = np.outer(positions, mode_list) * np.pi
sine_array = np.sin(phase_array)

# constants for sound generation
f1 = 440.0  # fundamental mode frequency in Hz
duration = 1  # duration of tone in seconds

# sampling constants
sample_rate = np.int(2*f1*num_modes*oversample) #22050  # sample rate of sound in samples per second
sample_length = duration * sample_rate
time_step = 1.0 / sample_rate
times = np.arange(sample_length) * time_step

# other constants
wavefile = "temp.wav"

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("pluck", "Position", 0, 100, 50),
            ui.input_slider("vol","Amplitude",0,1,0.5),
            ui.HTML("<p>Listen:</p>"),
            ui.output_ui("audio_w"),
            #ui.output_text_verbatim("txt"),
        ),
        ui.panel_main(
            ui.output_plot("plot"),
            ui.output_plot("waveplot"),
        ),
    )
)

def server(input, output, session):
    # start by calculating the stuff
    @reactive.Calc
    def amplitudes():
        return np.sin(mode_list * np.pi * input.pluck() / 100.0)

    @reactive.Calc
    def waveform():
        unnorm= np.sum(
            amplitudes() * np.sin(2 * np.pi * f1 * np.outer(mode_list, times)).T, axis=1
        )
        data = np.int16(input.vol()*unnorm/unnorm.max()*32767)
        return data

    @reactive.Calc
    def gen_wavefile():
        # first normalize to right data size
        with open(my_path/wavefile, "wb") as f:
            wf.write(f, sample_rate, waveform())
        return wavefile

    @output
    @render.plot
    def plot():
        """calculate and do the plot"""
        # set up figure grid
        fig = plt.figure(figsize=(10, 2))
        gs = plt.GridSpec(1, 2, width_ratios=[1, 2])
        ax = [fig.add_subplot(g) for g in gs]

        # plot the amplitudes
        amps = amplitudes()

        ax[0].bar(mode_list, amps, width=0.5)
        ax[0].axhline(0, 0, 1, c="k", lw=0.5)
        ax[0].set_xticks(mode_list)
        ax[0].set_xlabel("Mode number")
        ax[0].set_ylabel("Amplitude")
        ax[0].set_title("Mode amplitudes")

        # calculate the curves
        for i in range(num_modes):
            ax[1].plot(
                positions,
                amps[i] * np.sin(phase_array[:, i]),
                alpha=0.7 * np.abs(amps[i]) ** 2,
                color="r",
                lw=1,
            )
        ax[1].plot(positions, np.sum(sine_array * amps, axis=1), "k", lw=2)
        ax[1].set_xlim(0, 1)
        ax[1].axvline(input.pluck(), 0, 1, c="k", ls="dotted")
        ax[1].axhline(0, 0, 1, c="k", lw=0.5)
        ax[1].set_xlabel("Position (x/L)")
        ax[1].set_ylabel("Amplitude")
        ax[1].set_title("String shape")
        return

    @output
    @render.plot
    def waveplot():
        fig = plt.figure(figsize=(10, 2))
        plt.plot(times[:100], waveform()[:100])
        return

    @output
    @render.ui
    def audio_w():
        return ui.HTML(f'<audio controls loop><source src="{gen_wavefile()}" type="audio/wav" ></audio>')
        
app = App(app_ui, server, static_assets=my_path)

```
